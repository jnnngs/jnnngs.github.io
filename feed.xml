<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>jnnngs</title>
    <link href="https://jnnn.gs/feed.xml" rel="self" />
    <link href="https://jnnn.gs" />
    <updated>2021-01-15T16:03:54+00:00</updated>
    <author>
        <name>Jnnngs</name>
    </author>
    <id>https://jnnn.gs</id>

    <entry>
        <title>Azure Private Endpoints Vs Service Endpoints</title>
        <author>
            <name>Jnnngs</name>
        </author>
        <link href="https://jnnn.gs/azure-private-endpoints-vs-service-endpoints.html"/>
        <id>https://jnnn.gs/azure-private-endpoints-vs-service-endpoints.html</id>

        <updated>2021-01-15T16:03:54+00:00</updated>
            <summary>
                <![CDATA[
                    Following a deep dive into the world of Azure endpoints, I found it interesting that there is a misconception of the primary uses (and any secondary uses) of Azure Private Endpoints. It seems that they are being used when a Service Endpoint is perfectly suitable&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Following a deep dive into the world of Azure endpoints, I found it interesting that there is a misconception of the primary uses (and any secondary uses) of Azure Private Endpoints. It seems that they are being used when a Service Endpoint is perfectly suitable (and free) to use. I have lightly written this up as a reminder for me in future and if its of use for anyone else.</p>
<p>The following is broken up between Public, Private and Service endpoints. I'll try and capture the primary use case for each, pros and cons and anything further of interest. As this topic is vast, there are bound to be a few things not covered but I shall intent to keep this topic updated as and when its useful to do so.</p>
<h2>Public Endpoint</h2>
<figure class="post__image" ><img loading="lazy" src="https://jnnn.gs/media/posts/5//PublicEndpoint.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-xs.png 300w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-sm.png 480w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-md.png 768w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-lg.png 1024w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-xl.png 1360w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-2xl.png 1600w"  alt="Public Endpoint" width="436" height="644">
<figcaption >Figure: #1 Public Endpoint</figcaption>
</figure>
<p><strong>When to use Public Endpoints</strong>:<br>  <br>When secure but public internet routing  isn't an issue for either direct to Storage account or via VNET components.</p>
<p><strong>Pros</strong></p>
<p>1.Simple solution</p>
<p>2.Storage account options to control networking connection type (TLS version) and source access via Firewalls and virtual networks (public internet, VNETs)</p>
<p>3.No additional costs</p>
<p><strong>Cons</strong></p>
<p>1.Traffic routed over public internet (if this is an issue)</p>
<h2>Private Endpoint</h2>
<figure class="post__image" ><img loading="lazy" src="https://jnnn.gs/media/posts/5/PrivateEndpoint-2.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-xs.png 300w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-sm.png 480w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-md.png 768w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-lg.png 1024w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-xl.png 1360w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-2xl.png 1600w"  alt="Private Endpoint" width="425" height="572">
<figcaption >Figure: #2 Private Endpoint</figcaption>
</figure>
<p><strong>When to use Private Endpoints</strong>:<br>  <br>When non-public internet access is required to an Azure PaaS component via express route or S2S VPN. Other uses are possible, but a standard Service Endpoint should be considered as a Private Endpoint is likely to be overkill for a non-express route or S2S VPN use case.</p>
<p><strong>Pros</strong></p>
<p>1.Private IPs used</p>
<p>2.No public internet traffic or public IP is present</p>
<p>3.Optional data exfiltration, locking private access directly to the storage account instance, preventing communications with other instances</p>
<p><strong>Cons</strong></p>
<p>1.Set-up is slightly more involved than service endpoints</p>
<p>2.Charges per hour, inbound traffic and outbound traffic</p>
<p>3.NSG is not supported on private endpoints</p>
<p>4.Targets a specific use case</p>
<p>5.Each storage account (and type) needs its own private endpoint</p>
<h2>Service Endpoint</h2>
<figure class="post__image" ><img loading="lazy" src="https://jnnn.gs/media/posts/5/ServiceEndpoint.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-xs.png 300w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-sm.png 480w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-md.png 768w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-lg.png 1024w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-xl.png 1360w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-2xl.png 1600w"  alt="Service Endpoint" width="418" height="584">
<figcaption >Figure: #4 Service Endpoint</figcaption>
</figure>
<p><strong>When to use Service Endpoint</strong>:<br>  <br>When restricted or non-public internet access is required to an Azure PaaS component from an existing VNET</p>
<p><strong>Pros</strong></p>
<p>1.Simple set-up</p>
<p>a.create service end point on VNET/Subnet(s)</p>
<p>b.Limit storage account network access to same VNET/subnet(s)</p>
<p>2.No additional costs</p>
<p>3.Private IPs used</p>
<p>4.No public internet traffic</p>
<p><strong>Cons</strong></p>
<p>1.Public IP exists although unusable</p>
<p>2.Any existing public IP firewall rules will need to be reconfigured</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>WebDAV URLs of Common Cloud Storage Services</title>
        <author>
            <name>Jnnngs</name>
        </author>
        <link href="https://jnnn.gs/webdav-urls-of-common-cloud-storage-services.html"/>
        <id>https://jnnn.gs/webdav-urls-of-common-cloud-storage-services.html</id>

        <updated>2021-01-09T16:55:00+00:00</updated>
            <summary>
                <![CDATA[
                    This is a list of the most common WebDAV URLs you need to enter into the iOS and Android app if you want to connect to your cloud storage service. * pCloud disables WebDAV access when 2FA is enabled.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>This is a list of the most common WebDAV URLs you need to enter into the iOS and Android app if you want to connect to your cloud storage service.</p>
<table>
<thead>
<tr>
<th>Cloud Storage Service</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>1&amp;1 Online-Speicher (DSL)</td>
<td>https://sd2dav.1und1.de</td>
</tr>
<tr>
<td>1&amp;1 Online-Speicher (Webhosting)</td>
<td>https://webdav.office.1und1.de</td>
</tr>
<tr>
<td>blaucloud</td>
<td>https://{username}.blaucloud.de/remote.php/webdav</td>
</tr>
<tr>
<td>Box</td>
<td>https://dav.box.com/dav</td>
</tr>
<tr>
<td>freenetcloud</td>
<td>https://webmail.freenet.de/webdav</td>
</tr>
<tr>
<td>GMX MediaCenter</td>
<td>https://webdav.mc.gmx.net</td>
</tr>
<tr>
<td>HiDrive</td>
<td>https://webdav.hidrive.strato.com</td>
</tr>
<tr>
<td>IceDrive</td>
<td>https://webdav.icedrive.io/</td>
</tr>
<tr>
<td>IDrive</td>
<td>https://dav.idrivesync.com</td>
</tr>
<tr>
<td>kDrive</td>
<td>https://connect.drive.infomaniak.com</td>
</tr>
<tr>
<td>Koofr</td>
<td>https://app.koofr.net/dav/Koofr</td>
</tr>
<tr>
<td>MagentaCLOUD</td>
<td>https://webdav.magentacloud.de</td>
</tr>
<tr>
<td>Mail.Ru</td>
<td>https://webdav.cloud.mail.ru</td>
</tr>
<tr>
<td>Nextcloud</td>
<td>https://{host}/{path}/remote.php/dav/files/{username}<br>or<br>https://{host}/{path}/remote.php/webdav</td>
</tr>
<tr>
<td>ownCloud</td>
<td>https://{host}/{path}/remote.php/webdav</td>
</tr>
<tr>
<td>pCloud* (US)</td>
<td>https://webdav.pcloud.com</td>
</tr>
<tr>
<td>pCloud* (EU)</td>
<td>https://ewebdav.pcloud.com</td>
</tr>
<tr>
<td>Seafile (self-hosted)</td>
<td>https://{host}/{path}/seafdav</td>
</tr>
<tr>
<td>STACK</td>
<td>https://{username}.stackstorage.com/remote.php/webdav</td>
</tr>
<tr>
<td>Strato HiDrive</td>
<td>https://webdav.hidrive.strato.com</td>
</tr>
<tr>
<td>Syncwerk (formerly Seafile.de)</td>
<td>https://app.syncwerk.com/seafdav</td>
</tr>
<tr>
<td>WEB.DE Online-Speicher</td>
<td>https://webdav.smartdrive.web.de</td>
</tr>
<tr>
<td>wölkli</td>
<td>https://cloud.woelkli.com/remote.php/webdav</td>
</tr>
<tr>
<td>Yandex.Disk</td>
<td>https://webdav.yandex.com</td>
</tr>
<tr>
<td>Mailbox.org</td>
<td>https://dav.mailbox.org/servlet/webdav.infostore/</td>
</tr>
</tbody>
</table>
<p>* pCloud disables WebDAV access when 2FA is enabled.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to configure Multiple Domains with Nginx</title>
        <author>
            <name>Jnnngs</name>
        </author>
        <link href="https://jnnn.gs/how-to-configure-multiple-domains-with-nginx.html"/>
        <id>https://jnnn.gs/how-to-configure-multiple-domains-with-nginx.html</id>

        <updated>2021-01-08T17:30:34+00:00</updated>
            <summary>
                <![CDATA[
                    Configure First DomainThe default configuration file for Nginx is /etc/nginx/nginx.conf, and we’re free to add our domains to this configuration. However, it is strongly recommended not do that. The single, biggest reason not to combine all domains in one configuration is that it will become&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Configure First Domain</h2>
<p>The default configuration file for Nginx is <code>/etc/nginx/nginx.conf</code>, and we’re free to add our domains to this configuration. However, it is strongly recommended not do that. The single, biggest reason not to combine all domains in one configuration is that it will become very unwieldy, and cumbersome to maintain. Rather, it is advised to create individual configuration files for each domain, placing them in the <code>/etc/nginx/sites-available</code> directory. There is a <code>default</code> file that is created as part of the initial install, so feel free it use that or rename it to something more meaningful.</p>
<p>The key to then enabling the domain, is to create a symbolic link to the <code>/etc/nginx/sites-enabled</code> directory. The default file is already included, so nothing to do if you have reused this file. If you have renamed it to something meaningful, then run the following line command create the symbolic link.</p>
<p><code>sudo ln -s /etc/nginx/sites-available/<span style="color: #2dc26b;">MEANINGFUL_NAME</span> /etc/nginx/sites-enabled/<span style="color: #2dc26b;">MEANINGFUL_NAME</span></code></p>
<p>NB: It is common practice to name the files with an <code>.conf</code> extension, although it is not required to do so</p>
<h2>Configure Second Domain</h2>
<p>In order to create and activate the second domain, you should copy the <code>default</code> (or whatever you renamed it to)  file within <code>/etc/nginx/sites-available</code> and amend accordingly. </p>
<p><code>cp /etc/nginx/sites-available/default /etc/nginx/sites-available/<span style="color: #2dc26b;">domain_two</span></code></p>
<p>In order for Nginx to know which configuration file to use, it references the inbound domain against the server_name configuration within the server block. Example below:-</p>
<pre>server {
     listen 80;
     listen [::]:80;
     server_name domain-two.com www.domain-two.com;

     root /var/www/domain-two.com/public_html;

     index index.html index.htm;

     location / {
          try_files $uri $uri/ =404;
     }
}</pre>
<p>Following this, you need to create the symbolic link.</p>
<p><code>sudo ln -s /etc/nginx/sites-available/<span style="color: #2dc26b;">domain_two</span> /etc/nginx/sites-enabled/<span style="color: #2dc26b;">domain_two</span></code></p>
<h2>Start or restart the Nginx service</h2>
<p><code>sudo systemctl start nginx</code></p>
<p>If Nginx is already running, reload all configuration files without stopping the service.</p>
<p><code>sudo systemctl reload nginx</code></p>
<p>Verify that Nginx is running.</p>
<p><code>sudo systemctl status nginx</code></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Jenkins Deployment ssh-keygen</title>
        <author>
            <name>Jnnngs</name>
        </author>
        <link href="https://jnnn.gs/jenkins-deployment-ssh-keygen.html"/>
        <id>https://jnnn.gs/jenkins-deployment-ssh-keygen.html</id>

        <updated>2021-01-08T09:01:00+00:00</updated>
            <summary>
                <![CDATA[
                    So, as part of my home lab and the automatic deployment of this blog, Jenkins needs to SSH onto the deployment Raspberry Pi to execute a bash script. Jenkins has been installed using its own username and as it is a service account, the method&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>So, as part of my home lab and the automatic deployment of this blog, Jenkins needs to SSH onto the deployment Raspberry Pi to execute a bash script. Jenkins has been installed using its own username and as it is a service account, the method to generate and copy the ssh-gen keys is different to the standard way for normal linux/ubuntu user accounts.</p>
<p><code>#Jekins is a service account, so it needs its ssh keys for remote execution to be created differently...</code><br><br><code>#login to jenkins server and switch to jenkins service user account</code><br><code>sudo su -s /bin/bash jenkins</code><br><br><code>#create keys. default location will be /var/lib/jenkins/.ssh/id_rsa</code><br><code>ssh-keygen</code><br><br><code>#copy keys over to destination server</code><br><code>cat /var/lib/jenkins/.ssh/id_rsa.pub | ssh <a href="mailto:ubuntu@DEPLOYMENT">ubuntu@<span style="color: #2dc26b;">DEPLOYMENT</span></a><span style="color: #2dc26b;">_IP_ADDRESS</span> "mkdir -p ~/.ssh &amp;&amp; touch ~/.ssh/authorized_keys &amp;&amp; chmod -R go= ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys"</code><br><br></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hello World</title>
        <author>
            <name>Jnnngs</name>
        </author>
        <link href="https://jnnn.gs/hello-world.html"/>
        <id>https://jnnn.gs/hello-world.html</id>

        <updated>2021-01-14T09:10:29+00:00</updated>
            <summary>
                <![CDATA[
                    First post using Publii CMS which is a static HTML creation tool. I intend to use this tool for content with Jenkins to auto-deploy to jnnn.gs. Publii CMS --&gt; HTML on GitHub --&gt; Jenkins on Rasp --&gt; SAST --&gt; Deploy on Rasp --&gt; DAST 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>First post using Publii CMS which is a static HTML creation tool. I intend to use this tool for content with Jenkins to auto-deploy to jnnn.gs.</p>
<p><code>Publii CMS --&gt; HTML on GitHub --&gt; Jenkins on Rasp --&gt; SAST --&gt; Deploy on Rasp --&gt; DAST </code></p>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>

{
    "version": "https://jsonfeed.org/version/1",
    "title": "jnnngs",
    "description": "",
    "home_page_url": "https://jnnn.gs",
    "feed_url": "https://jnnn.gs/feed.json",
    "user_comment": "",
    "author": {
        "name": "Jnnngs"
    },
    "items": [
        {
            "id": "https://jnnn.gs/eth2-node-reduce-disk-space-usage.html",
            "url": "https://jnnn.gs/eth2-node-reduce-disk-space-usage.html",
            "title": "ETH2 Node Reduce Disk Space Usage",
            "summary": "So, I have a ETH2 validator node which uses a Hetzner AX41 dedicated server and has been running since genesis. The set-up includes a GETH ETH1 node, beacon chain and the ETH2 Validator (Prysm) and is slowly using the allocated 1TB NVMe disk space (2&hellip;",
            "content_html": "<p>So, I have a ETH2 validator node which uses a Hetzner AX41 dedicated server and has been running since genesis. The set-up includes a GETH ETH1 node, beacon chain and the ETH2 Validator (Prysm) and is slowly using the allocated 1TB NVMe disk space (2 x 512GB using RAID 0). I reached out to the Prysm Discord channel to seek advice and what is best to do. A very friendly mod replied and I thought it useful to share in ase anyone else has the same challenge.</p>\n<p>I'm planning to go with option 1, as I already have infura failover configured. Another option is to add 2 x more NVMe disks from Hetzner and then add them to the OS. This would mean 20 minutes downtime, so an option for future need.</p>\n<p> </p>\n<div id=\"chat-messages-825015216634593311\" class=\"message-2qnXI6 cozyMessage-3V1Y8y wrapper-2a6GCs cozy-3raOZG zalgo-jN1Ica\" tabindex=\"-1\" role=\"listitem\" data-list-item-id=\"chat-messages___chat-messages-825015216634593311\">\n<div class=\"contents-2mQqc9\" role=\"document\">\n<div class=\"markup-2BOw-j messageContent-2qWWxC\"><span style=\"color: #2dc26b;\">1) Configure a failover eth1 - infura free or alchemy free - then offline snapshot prune geth. This requires 50 GiB free. If you have 25 GiB free, we have reports of it failing; more than 25 and less than 50, I guess you will be our guinea pig! Stop geth, and, as the user that geth runs at in production, do a snapshot prune. If geth runs in systemd, it might look like this: <code class=\"inline\">tmux</code> so the prune doesn't get killed early, and then <code class=\"inline\">sudo systemctl stop geth</code> and then <code class=\"inline\">sudo -u GETHUSER geth --datadir /my/data/dir snapshot prune-state</code>. That will take about 4 hours, and then Geth will be back down to around 350 GiB used. The data dir and user will be recorded in <code class=\"inline\">/etc/system/systemd/geth.service</code>, again assuming systemd and <code class=\"inline\">geth</code> as the service name. If you are using eth2-docker, it's even easier; and I assume similar for stefa2k's docker tools. For eth2-docker: <code class=\"inline\">docker-compose stop eth1 &amp;&amp; docker-compose rm eth1</code>, followed by <code class=\"inline\">docker-compose run -d eth1 snapshot prune-state</code>. You can use <code class=\"inline\">docker-compose logs -f eth1</code> to watch it, and when it's done, <code class=\"inline\">docker-compose up -d eth1</code>. </span></div>\n<div> </div>\n<div class=\"markup-2BOw-j messageContent-2qWWxC\"><span style=\"color: #2dc26b;\">2) Stop using geth and rely on infura free with alchemy free failover, or vice versa. This works remarkably well before the consensus upgrade. After the consensus upgrade, running your own geth as an \"application client\" may be very desirable, but that's at least 9-12 months out.</span></div>\n</div>\n<div class=\"buttonContainer-DHceWr\">\n<div class=\"buttons-cl5qTG container-3npvBV\" aria-label=\"Message Actions\">\n<div class=\"wrapper-2aW0bm\">\n<div class=\"button-1ZiXG9\" tabindex=\"0\" role=\"button\" aria-label=\"Add Reaction\" aria-controls=\"popout_2378\" aria-expanded=\"false\"> </div>\n<div class=\"button-1ZiXG9\" tabindex=\"0\" role=\"button\" aria-label=\"More\" aria-controls=\"popout_2379\" aria-expanded=\"false\"><span style=\"color: #2dc26b; font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">So choose your adventure: 1) or 2)</span></div>\n</div>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Jnnngs"
            },
            "tags": [
            ],
            "date_published": "2021-03-26T15:02:35+00:00",
            "date_modified": "2021-03-26T15:02:35+00:00"
        },
        {
            "id": "https://jnnn.gs/when-to-use-vnet-peering-vs-vpn-gateway-on-azure.html",
            "url": "https://jnnn.gs/when-to-use-vnet-peering-vs-vpn-gateway-on-azure.html",
            "title": "When to use VNet Peering vs VPN Gateway on Azure",
            "summary": "I was recently playing about with the Hub and Spoke model within Azure and came across two methods to provide connectivity between the two. The idea behind the design pattern is that the Hub is the main entry point with common services for the Spoke(s)&hellip;",
            "content_html": "<p>I was recently playing about with the <a href=\"https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/hybrid-networking/hub-spoke?tabs=cli\" target=\"_blank\" rel=\"noopener noreferrer\">Hub and Spoke</a> model within Azure and came across two methods to provide connectivity between the two. The idea behind the design pattern is that the Hub is the main entry point with common services for the Spoke(s) to use. The Hub typically has some type of WAF or FW, to help protect and direct the inbound traffic. Its considered best practice that Spokes do not communicate directly with one another, but that all traffic is routed via the Hub. This enables central Hub control and visibility. </p>\n<p>TBC....the rest...</p>\n<p> </p>",
            "author": {
                "name": "Jnnngs"
            },
            "tags": [
            ],
            "date_published": "2021-02-25T10:45:11+00:00",
            "date_modified": "2021-03-26T16:45:13+00:00"
        },
        {
            "id": "https://jnnn.gs/azure-private-endpoints-vs-service-endpoints.html",
            "url": "https://jnnn.gs/azure-private-endpoints-vs-service-endpoints.html",
            "title": "Azure Private Endpoints Vs Service Endpoints",
            "summary": "Following a deep dive into the world of Azure endpoints, I found it interesting that there is a misconception of the primary uses (and any secondary uses) of Azure Private Endpoints. It seems that they are being used when a Service Endpoint is perfectly suitable&hellip;",
            "content_html": "<p>Following a deep dive into the world of Azure endpoints, I found it interesting that there is a misconception of the primary uses (and any secondary uses) of Azure Private Endpoints. It seems that they are being used when a Service Endpoint is perfectly suitable (and free) to use. I have lightly written this up as a reminder for me in future and if its of use for anyone else.</p>\n<p>The following is broken up between Public, Private and Service endpoints. I'll try and capture the primary use case for each, pros and cons and anything further of interest. As this topic is vast, there are bound to be a few things not covered but I shall intent to keep this topic updated as and when its useful to do so.</p>\n<p><a href=\"https://www.youtube.com/watch?v=4v-9zGHxVeI\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.youtube.com/watch?v=4v-9zGHxVeI</a></p>\n<h2>Public Endpoint</h2>\n<figure class=\"post__image\" ><img loading=\"lazy\" src=\"https://jnnn.gs/media/posts/5//PublicEndpoint.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-xs.png 300w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-sm.png 480w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-md.png 768w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-lg.png 1024w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-xl.png 1360w ,https://jnnn.gs/media/posts/5//responsive/PublicEndpoint-2xl.png 1600w\"  alt=\"Public Endpoint\" width=\"436\" height=\"644\">\n<figcaption >Figure: #1 Public Endpoint</figcaption>\n</figure>\n<p>Traffic is routed over the internet, using the public IP endpoints.</p>\n<p><strong>When to use Public Endpoints</strong>:<br>  <br>When secure but public internet routing  isn't an issue for either direct to Storage account or via VNET components.</p>\n<p><strong>Pros</strong></p>\n<p>1.Simple solution</p>\n<p>2.Storage account options to control networking connection type (TLS version) and source access via Firewalls and virtual networks (public internet, VNETs)</p>\n<p>3.No additional costs</p>\n<p><strong>Cons</strong></p>\n<p>1.Traffic routed over public internet (if this is an issue)</p>\n<h2>Private Endpoint</h2>\n<figure class=\"post__image\" ><img loading=\"lazy\" src=\"https://jnnn.gs/media/posts/5/PrivateEndpoint-2.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-xs.png 300w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-sm.png 480w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-md.png 768w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-lg.png 1024w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-xl.png 1360w ,https://jnnn.gs/media/posts/5/responsive/PrivateEndpoint-2-2xl.png 1600w\"  alt=\"Private Endpoint\" width=\"425\" height=\"572\">\n<figcaption >Figure: #2 Private Endpoint</figcaption>\n</figure>\n<p>Azure Private Endpoint is a network interface that connects you privately and securely to a service powered by Azure Private Link. Private Endpoint uses a private IP address from your VNet, effectively bringing the service into your VNet. You can think of this as a new virtual network card on the PaaS component (e.g. Storage account) which is then assigned to the VNET/Subnet. This addresses the main exam question of accessing an Azure PaaS component <strong>DIRECTLY</strong> via Express Route or Site-To-Site VPN and not having to target the public IP endpoint. A service endpoint doesn't solve this problem.</p>\n<p><a href=\"https://docs.microsoft.com/en-us/azure/private-link/private-endpoint-overview\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/en-us/azure/private-link/private-endpoint-overview</a></p>\n<div><a href=\"https://youtu.be/uBN3AVARUiI?t=110\" target=\"_blank\" rel=\"noopener noreferrer\">https://youtu.be/uBN3AVARUiI?t=110</a></div>\n<p><strong>When to use Private Endpoints</strong>:<br>  <br>When non-public internet access is required to an Azure PaaS component via express route or S2S VPN. Other uses are possible, but a standard Service Endpoint should be considered as a Private Endpoint is likely to be overkill for a non-express route or S2S VPN use case.</p>\n<p><strong>Pros</strong></p>\n<p>1.Private address used</p>\n<p>2.No public internet traffic or public IP is present</p>\n<p>3.Optional data exfiltration, locking private access directly to the storage account instance, preventing communications with other instances</p>\n<p><strong>Cons</strong></p>\n<p>1.Dependant on scenario, the set-up can be <strong>significantly </strong>more involved than service endpoints*</p>\n<p>2.Charges per hour, inbound traffic and outbound traffic</p>\n<p>3.NSG is not supported on private endpoints</p>\n<p>4.Targets a specific use case</p>\n<p>5.Each storage account (and type) needs its own private endpoint</p>\n<p>*It's important to correctly configure your DNS settings to resolve the private endpoint IP address to the fully qualified domain name (FQDN) of the connection string. Existing Microsoft Azure services might already have a DNS configuration for a public endpoint. This configuration must be overridden to connect using your private endpoint.</p>\n<p>See <a href=\"https://docs.microsoft.com/en-us/azure/private-link/private-endpoint-dns\" target=\"_blank\" rel=\"noopener noreferrer\"></a><a href=\"https://docs.microsoft.com/en-us/azure/private-link/private-endpoint-dns\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/en-us/azure/private-link/private-endpoint-dns</a></p>\n<h2>Service Endpoint</h2>\n<figure class=\"post__image\" ><img loading=\"lazy\" src=\"https://jnnn.gs/media/posts/5/ServiceEndpoint.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-xs.png 300w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-sm.png 480w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-md.png 768w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-lg.png 1024w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-xl.png 1360w ,https://jnnn.gs/media/posts/5/responsive/ServiceEndpoint-2xl.png 1600w\"  alt=\"Service Endpoint\" width=\"418\" height=\"584\">\n<figcaption >Figure: #4 Service Endpoint</figcaption>\n</figure>\n<p>Virtual network rule(s) can secure the Azure service resources to your virtual network. The rule addition provides improved security by fully removing public internet access to resources and allowing traffic only from your virtual network.</p>\n<p>When service endpoint is enabled for storage accounts, the identity of the virtual network  will be made available to the storage account(s). All source IPs from the <br>VNET/Subnet(s) will be private IPs.<br><br>When the VM connects to the storage account, the storage account knows which virtual network and which subnet the request has come from. The VM IP visibile to the storage account will be the private IP address and not the public IP. The VM still believes it is connecting to the storage account public IP, but the traffic never leave the Azure  backbone. i.e. private IP is used</p>\n<p><a href=\"https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-service-endpoints-overview\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-service-endpoints-overview</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=q8s-zmHighs\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.youtube.com/watch?v=q8s-zmHighs</a></p>\n<p><strong>When to use Service Endpoint</strong>:<br>  <br>When restricted or non-public internet access is required to an Azure PaaS component from an existing VNET</p>\n<p><strong>Pros</strong></p>\n<p>1.Simple set-up</p>\n<p>   a.create service end point on VNET/Subnet(s)</p>\n<p>   b.Limit storage account network access to same VNET/subnet(s)</p>\n<p>2.No additional costs</p>\n<p>3.Public address continued to be used, although Azure routing uses internal backbone*</p>\n<p>4.No public internet traffic, by configuring PaaS service firewall rules</p>\n<p><strong>Cons</strong></p>\n<p>1.Public address exists although unusable</p>\n<p>2.Any existing public IP firewall rules will need to be reconfigured</p>\n<p>*Please note that no changes are required to the requesting PaaS component as this continues to use the public endpoint FQDN. Azure returns the private IP rather than the public IP, knowing that a service endpoint is in use.</p>",
            "author": {
                "name": "Jnnngs"
            },
            "tags": [
            ],
            "date_published": "2021-01-15T09:19:49+00:00",
            "date_modified": "2021-01-22T08:56:21+00:00"
        },
        {
            "id": "https://jnnn.gs/webdav-urls-of-common-cloud-storage-services.html",
            "url": "https://jnnn.gs/webdav-urls-of-common-cloud-storage-services.html",
            "title": "WebDAV URLs of Common Cloud Storage Services",
            "summary": "This is a list of the most common WebDAV URLs you need to enter into the iOS and Android app if you want to connect to your cloud storage service. * pCloud disables WebDAV access when 2FA is enabled.",
            "content_html": "<p>This is a list of the most common WebDAV URLs you need to enter into the iOS and Android app if you want to connect to your cloud storage service.</p>\n<table>\n<thead>\n<tr>\n<th>Cloud Storage Service</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1&amp;1 Online-Speicher (DSL)</td>\n<td>https://sd2dav.1und1.de</td>\n</tr>\n<tr>\n<td>1&amp;1 Online-Speicher (Webhosting)</td>\n<td>https://webdav.office.1und1.de</td>\n</tr>\n<tr>\n<td>blaucloud</td>\n<td>https://{username}.blaucloud.de/remote.php/webdav</td>\n</tr>\n<tr>\n<td>Box</td>\n<td>https://dav.box.com/dav</td>\n</tr>\n<tr>\n<td>freenetcloud</td>\n<td>https://webmail.freenet.de/webdav</td>\n</tr>\n<tr>\n<td>GMX MediaCenter</td>\n<td>https://webdav.mc.gmx.net</td>\n</tr>\n<tr>\n<td>HiDrive</td>\n<td>https://webdav.hidrive.strato.com</td>\n</tr>\n<tr>\n<td>IceDrive</td>\n<td>https://webdav.icedrive.io/</td>\n</tr>\n<tr>\n<td>IDrive</td>\n<td>https://dav.idrivesync.com</td>\n</tr>\n<tr>\n<td>kDrive</td>\n<td>https://connect.drive.infomaniak.com</td>\n</tr>\n<tr>\n<td>Koofr</td>\n<td>https://app.koofr.net/dav/Koofr</td>\n</tr>\n<tr>\n<td>MagentaCLOUD</td>\n<td>https://webdav.magentacloud.de</td>\n</tr>\n<tr>\n<td>Mail.Ru</td>\n<td>https://webdav.cloud.mail.ru</td>\n</tr>\n<tr>\n<td>Nextcloud</td>\n<td>https://{host}/{path}/remote.php/dav/files/{username}<br>or<br>https://{host}/{path}/remote.php/webdav</td>\n</tr>\n<tr>\n<td>ownCloud</td>\n<td>https://{host}/{path}/remote.php/webdav</td>\n</tr>\n<tr>\n<td>pCloud* (US)</td>\n<td>https://webdav.pcloud.com</td>\n</tr>\n<tr>\n<td>pCloud* (EU)</td>\n<td>https://ewebdav.pcloud.com</td>\n</tr>\n<tr>\n<td>Seafile (self-hosted)</td>\n<td>https://{host}/{path}/seafdav</td>\n</tr>\n<tr>\n<td>STACK</td>\n<td>https://{username}.stackstorage.com/remote.php/webdav</td>\n</tr>\n<tr>\n<td>Strato HiDrive</td>\n<td>https://webdav.hidrive.strato.com</td>\n</tr>\n<tr>\n<td>Syncwerk (formerly Seafile.de)</td>\n<td>https://app.syncwerk.com/seafdav</td>\n</tr>\n<tr>\n<td>WEB.DE Online-Speicher</td>\n<td>https://webdav.smartdrive.web.de</td>\n</tr>\n<tr>\n<td>wölkli</td>\n<td>https://cloud.woelkli.com/remote.php/webdav</td>\n</tr>\n<tr>\n<td>Yandex.Disk</td>\n<td>https://webdav.yandex.com</td>\n</tr>\n<tr>\n<td>Mailbox.org</td>\n<td>https://dav.mailbox.org/servlet/webdav.infostore/</td>\n</tr>\n</tbody>\n</table>\n<p>* pCloud disables WebDAV access when 2FA is enabled.</p>",
            "author": {
                "name": "Jnnngs"
            },
            "tags": [
            ],
            "date_published": "2021-01-09T16:55:00+00:00",
            "date_modified": "2021-01-09T16:55:00+00:00"
        },
        {
            "id": "https://jnnn.gs/how-to-configure-multiple-domains-with-nginx.html",
            "url": "https://jnnn.gs/how-to-configure-multiple-domains-with-nginx.html",
            "title": "How to configure Multiple Domains with Nginx",
            "summary": "Configure First Domain The default configuration file for Nginx is /etc/nginx/nginx.conf, and we’re free to add our domains to this configuration. However, it is strongly recommended not do that. The single, biggest reason not to combine all domains in one configuration is that it will&hellip;",
            "content_html": "<h2>Configure First Domain</h2>\n<p>The default configuration file for Nginx is <code>/etc/nginx/nginx.conf</code>, and we’re free to add our domains to this configuration. However, it is strongly recommended not do that. The single, biggest reason not to combine all domains in one configuration is that it will become very unwieldy, and cumbersome to maintain. Rather, it is advised to create individual configuration files for each domain, placing them in the <code>/etc/nginx/sites-available</code> directory. There is a <code>default</code> file that is created as part of the initial install, so feel free it use that or rename it to something more meaningful.</p>\n<p>The key to then enabling the domain, is to create a symbolic link to the <code>/etc/nginx/sites-enabled</code> directory. The default file is already included, so nothing to do if you have reused this file. If you have renamed it to something meaningful, then run the following line command create the symbolic link.</p>\n<p><code>sudo ln -s /etc/nginx/sites-available/<span style=\"color: #2dc26b;\">MEANINGFUL_NAME</span> /etc/nginx/sites-enabled/<span style=\"color: #2dc26b;\">MEANINGFUL_NAME</span></code></p>\n<p>NB: It is common practice to name the files with an <code>.conf</code> extension, although it is not required to do so</p>\n<h2>Configure Second Domain</h2>\n<p>In order to create and activate the second domain, you should copy the <code>default</code> (or whatever you renamed it to)  file within <code>/etc/nginx/sites-available</code> and amend accordingly. </p>\n<p><code>cp /etc/nginx/sites-available/default /etc/nginx/sites-available/<span style=\"color: #2dc26b;\">domain_two</span></code></p>\n<p>In order for Nginx to know which configuration file to use, it references the inbound domain against the server_name configuration within the server block. Example below:-</p>\n<pre>server {\n     listen 80;\n     listen [::]:80;\n     server_name domain-two.com www.domain-two.com;\n\n     root /var/www/domain-two.com/public_html;\n\n     index index.html index.htm;\n\n     location / {\n          try_files $uri $uri/ =404;\n     }\n}</pre>\n<p>Following this, you need to create the symbolic link.</p>\n<p><code>sudo ln -s /etc/nginx/sites-available/<span style=\"color: #2dc26b;\">domain_two</span> /etc/nginx/sites-enabled/<span style=\"color: #2dc26b;\">domain_two</span></code></p>\n<h2>Start or restart the Nginx service</h2>\n<p><code>sudo systemctl start nginx</code></p>\n<p>If Nginx is already running, reload all configuration files without stopping the service.</p>\n<p><code>sudo systemctl reload nginx</code></p>\n<p>Verify that Nginx is running.</p>\n<p><code>sudo systemctl status nginx</code></p>",
            "author": {
                "name": "Jnnngs"
            },
            "tags": [
            ],
            "date_published": "2021-01-08T17:07:39+00:00",
            "date_modified": "2021-01-08T17:30:34+00:00"
        },
        {
            "id": "https://jnnn.gs/jenkins-deployment-ssh-keygen.html",
            "url": "https://jnnn.gs/jenkins-deployment-ssh-keygen.html",
            "title": "Jenkins Deployment ssh-keygen",
            "summary": "So, as part of my home lab and the automatic deployment of this blog, Jenkins needs to SSH onto the deployment Raspberry Pi to execute a bash script. Jenkins has been installed using its own username and as it is a service account, the method&hellip;",
            "content_html": "<p>So, as part of my home lab and the automatic deployment of this blog, Jenkins needs to SSH onto the deployment Raspberry Pi to execute a bash script. Jenkins has been installed using its own username and as it is a service account, the method to generate and copy the ssh-gen keys is different to the standard way for normal linux/ubuntu user accounts.</p>\n<p><code>#Jekins is a service account, so it needs its ssh keys for remote execution to be created differently...</code><br><br><code>#login to jenkins server and switch to jenkins service user account</code><br><code>sudo su -s /bin/bash jenkins</code><br><br><code>#create keys. default location will be /var/lib/jenkins/.ssh/id_rsa</code><br><code>ssh-keygen</code><br><br><code>#copy keys over to destination server</code><br><code>cat /var/lib/jenkins/.ssh/id_rsa.pub | ssh <a href=\"mailto:ubuntu@DEPLOYMENT\">ubuntu@<span style=\"color: #2dc26b;\">DEPLOYMENT</span></a><span style=\"color: #2dc26b;\">_IP_ADDRESS</span> \"mkdir -p ~/.ssh &amp;&amp; touch ~/.ssh/authorized_keys &amp;&amp; chmod -R go= ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"</code><br><br></p>",
            "author": {
                "name": "Jnnngs"
            },
            "tags": [
            ],
            "date_published": "2021-01-08T08:55:36+00:00",
            "date_modified": "2021-01-08T09:01:00+00:00"
        },
        {
            "id": "https://jnnn.gs/hello-world.html",
            "url": "https://jnnn.gs/hello-world.html",
            "title": "Hello World",
            "summary": "First post using Publii CMS which is a static HTML creation tool. I intend to use this tool for content with Jenkins to auto-deploy to jnnn.gs. Publii CMS --&gt; HTML on GitHub --&gt; Jenkins on Rasp --&gt; SAST --&gt; Deploy on Rasp --&gt; DAST ",
            "content_html": "<p>First post using Publii CMS which is a static HTML creation tool. I intend to use this tool for content with Jenkins to auto-deploy to jnnn.gs.</p>\n<p><code>Publii CMS --&gt; HTML on GitHub --&gt; Jenkins on Rasp --&gt; SAST --&gt; Deploy on Rasp --&gt; DAST </code></p>\n<p> </p>",
            "author": {
                "name": "Jnnngs"
            },
            "tags": [
            ],
            "date_published": "2021-01-02T13:03:19+00:00",
            "date_modified": "2021-01-14T09:10:29+00:00"
        }
    ]
}
